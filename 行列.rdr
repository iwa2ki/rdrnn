行列とは
	＋中身：配列＝｛｝
	【大きさ】は，｛0，0｝。
	行の数を取得する手順
		大きさ（1）を返す
	終わり
	列の数を取得する手順
		大きさ（2）を返す。
	終わり
	自分を［他の行列：行列］に左からかける手順
		もし大きさ（2）が，他の行列の行の数でないなら
			「かける相手の行の数が［他の行列の行の数］なので乗算できません。」というエラーを発生させる。
		もし終わり
		【計算後】という行列（大きさ（1），他の行列の列の数）を作る。
		大きさ（1）回，【現在行】にカウントしながら繰り返す
			他の行列の列の数回，【現在列】にカウントしながら繰り返す
				大きさ（2）回，【現在要素】にカウントしながら繰り返す
					計算後の中身（現在行，現在列）へ，中身（現在行，現在要素）×他の行列の中身（現在要素，現在列）を足す。
				繰り返し終わり
			繰り返し終わり
		繰り返し終わり
		計算後を返す。
	終わり
	自分を［他の行列：行列］に右からかける手順
		もし大きさ（1）が，他の行列の列の数でないなら
			「かける相手の列の数が［他の行列の列の数］なので乗算できません。」というエラーを発生させる。
		もし終わり
		【計算後】という行列（他の行列の行の数，大きさ（2））を作る。
		他の行列の行の数回，【現在行】にカウントしながら繰り返す
			大きさ（2）回，【現在列】にカウントしながら繰り返す
				他の行列の列の数回，【現在要素】にカウントしながら繰り返す
					計算後の中身（現在行，現在列）へ，他の行列の中身（現在行，現在要素）×中身（現在要素，現在列）を足す。
				繰り返し終わり
			繰り返し終わり
		繰り返し終わり
		計算後を返す。
	終わり
	自分に［他の行列：行列］を足す手順
		もし大きさ（1）が他の行列の行の数かつ大きさ（2）が他の行列の列の数でないなら
			「大きさが異なる行列は足せません。」というエラーを発生させる。
		もし終わり
		【計算後】という行列（大きさ（1），大きさ（2））を作る。
		大きさ（1）回，【現在行】にカウントしながら繰り返す
			大きさ（2）回，【現在列】にカウントしながら繰り返す
				計算後の中身（現在行）（現在列）は，中身（現在行）（現在列）＋他の行列の中身（現在行）（現在列）。
			繰り返し終わり
		繰り返し終わり
		計算後を返す。
	終わり
	自分に［他の行列：行列］を破壊的に足す手順
		もし大きさ（1）が他の行列の行の数かつ大きさ（2）が他の行列の列の数でないなら
			「大きさが異なる行列は足せません。」というエラーを発生させる。
		もし終わり
		大きさ（1）回，【現在行】にカウントしながら繰り返す
			大きさ（2）回，【現在列】にカウントしながら繰り返す
				中身（現在行）（現在列）は，中身（現在行）（現在列）＋他の行列の中身（現在行）（現在列）。
			繰り返し終わり
		繰り返し終わり
	終わり
	自分に［他の行列：行列］を全部足す手順
		もし大きさ（1）が他の行列の行の数かつ1が他の行列の列の数なら
			【計算後】という行列（大きさ（1），大きさ（2））を作る。
			大きさ（1）回，【現在行】にカウントしながら繰り返す
				大きさ（2）回，【現在列】にカウントしながら繰り返す
					計算後の中身（現在行）（現在列）は，中身（現在行）（現在列）＋他の行列の中身（現在行）（1）。
				繰り返し終わり
			繰り返し終わり
			計算後を返す。
		もし終わり
		もし大きさ（2）が他の行列の列の数かつ1が他の行列の行の数なら
			【計算後】という行列（大きさ（1），大きさ（2））を作る。
			大きさ（1）回，【現在行】にカウントしながら繰り返す
				大きさ（2）回，【現在列】にカウントしながら繰り返す
					計算後の中身（現在行）（現在列）は，中身（現在行）（現在列）＋他の行列の中身（1）（現在列）。
				繰り返し終わり
			繰り返し終わり
			計算後を返す。
		もし終わり
		「行列の大きさがおかしいので足せません。」というエラーを発生させる。
	終わり
	自分に［数：数値］を全部足す手順
		【計算後】という行列（大きさ（1），大きさ（2））を作る。
		大きさ（1）回，【現在行】にカウントしながら繰り返す
			大きさ（2）回，【現在列】にカウントしながら繰り返す
				計算後の中身（現在行）（現在列）は，中身（現在行）（現在列）＋数。
			繰り返し終わり
		繰り返し終わり
		計算後を返す。
	終わり
	自分から［他の行列：行列］を引く手順
		もし大きさ（1）が他の行列の行の数かつ大きさ（2）が他の行列の列の数でないなら
			「大きさが異なる行列は引けません。」というエラーを発生させる。
		もし終わり
		【計算後】という行列（大きさ（1），大きさ（2））を作る。
		大きさ（1）回，【現在行】にカウントしながら繰り返す
			大きさ（2）回，【現在列】にカウントしながら繰り返す
				計算後の中身（現在行）（現在列）は，中身（現在行）（現在列）－他の行列の中身（現在行）（現在列）。
			繰り返し終わり
		繰り返し終わり
		計算後を返す。
	終わり
	自分から［他の行列：行列］を破壊的に引く手順
		もし大きさ（1）が他の行列の行の数かつ大きさ（2）が他の行列の列の数でないなら
			「大きさが異なる行列は引けません。」というエラーを発生させる。
		もし終わり
		大きさ（1）回，【現在行】にカウントしながら繰り返す
			大きさ（2）回，【現在列】にカウントしながら繰り返す
				中身（現在行）（現在列）は，中身（現在行）（現在列）－他の行列の中身（現在行）（現在列）。
			繰り返し終わり
		繰り返し終わり
	終わり
	自分から［他の行列：行列］を全部引く手順
		もし大きさ（1）が他の行列の行の数かつ1が他の行列の列の数なら
			【計算後】という行列（大きさ（1），大きさ（2））を作る。
			大きさ（1）回，【現在行】にカウントしながら繰り返す
				大きさ（2）回，【現在列】にカウントしながら繰り返す
					計算後の中身（現在行）（現在列）は，中身（現在行）（現在列）－他の行列の中身（現在行）（1）。
				繰り返し終わり
			繰り返し終わり
			計算後を返す。
		もし終わり
		もし大きさ（2）が他の行列の列の数かつ1が他の行列の行の数なら
			【計算後】という行列（大きさ（1），大きさ（2））を作る。
			大きさ（1）回，【現在行】にカウントしながら繰り返す
				大きさ（2）回，【現在列】にカウントしながら繰り返す
					計算後の中身（現在行）（現在列）は，中身（現在行）（現在列）－他の行列の中身（1）（現在列）。
				繰り返し終わり
			繰り返し終わり
			計算後を返す。
		もし終わり
		「行列の大きさがおかしいので引けません。」というエラーを発生させる。
	終わり
	自分から［数：数値］を全部引く手順
		【計算後】という行列（大きさ（1），大きさ（2））を作る。
		大きさ（1）回，【現在行】にカウントしながら繰り返す
			大きさ（2）回，【現在列】にカウントしながら繰り返す
				計算後の中身（現在行）（現在列）は，中身（現在行）（現在列）－数。
			繰り返し終わり
		繰り返し終わり
		計算後を返す。
	終わり
	自分に［他の行列：行列］をかける手順
		もし大きさ（1）が他の行列の行の数かつ大きさ（2）が他の行列の列の数でないなら
			「行列の大きさがおかしいのでかけられません。」というエラーを発生させる。
		もし終わり
		【計算後】という行列（大きさ（1），大きさ（2））を作る。
		大きさ（1）回，【現在行】にカウントしながら繰り返す
			大きさ（2）回，【現在列】にカウントしながら繰り返す
				計算後の中身（現在行）（現在列）は，中身（現在行）（現在列）×他の行列の中身（現在行）（現在列）。
			繰り返し終わり
		繰り返し終わり
		計算後を返す。
	終わり
	自分に［他の行列：行列］を全部かける手順
		もし大きさ（1）が他の行列の行の数かつ1が他の行列の列の数でないなら
			「行列の大きさがおかしいのでかけられません。」というエラーを発生させる。
		もし終わり
		【計算後】という行列（大きさ（1），大きさ（2））を作る。
		大きさ（1）回，【現在行】にカウントしながら繰り返す
			大きさ（2）回，【現在列】にカウントしながら繰り返す
				計算後の中身（現在行）（現在列）は，中身（現在行）（現在列）×他の行列の中身（現在行）（1）。
			繰り返し終わり
		繰り返し終わり
		計算後を返す。
	終わり
	自分に［数：数値］を全部かける手順
		【計算後】という行列（大きさ（1），大きさ（2））を作る。
		大きさ（1）回，【現在行】にカウントしながら繰り返す
			大きさ（2）回，【現在列】にカウントしながら繰り返す
				計算後の中身（現在行）（現在列）は，中身（現在行）（現在列）×数。
			繰り返し終わり
		繰り返し終わり
		計算後を返す。
	終わり
	自分を［他の行列：行列］で全部割る手順
		もし大きさ（1）が他の行列の行の数かつ1が他の行列の列の数でないなら
			「行列の大きさがおかしいので割れません。」というエラーを発生させる。
		もし終わり
		【計算後】という行列（大きさ（1），大きさ（2））を作る。
		大きさ（1）回，【現在行】にカウントしながら繰り返す
			大きさ（2）回，【現在列】にカウントしながら繰り返す
				計算後の中身（現在行）（現在列）は，中身（現在行）（現在列）÷他の行列の中身（現在行）（1）。
			繰り返し終わり
		繰り返し終わり
		計算後を返す。
	終わり
	自分を［数：数値］で全部割る手順
		【計算後】という行列（大きさ（1），大きさ（2））を作る。
		大きさ（1）回，【現在行】にカウントしながら繰り返す
			大きさ（2）回，【現在列】にカウントしながら繰り返す
				計算後の中身（現在行）（現在列）は，中身（現在行）（現在列）÷数。
			繰り返し終わり
		繰り返し終わり
		計算後を返す。
	終わり
	はじめ（行，列）の手順
		行回，繰り返す
			【一行】は，｛｝。
			列回，繰り返す
				一行へ0.0を追加する。
			繰り返し終わり
			中身へ一行を追加する。
		繰り返し終わり
		大きさは，｛行，列｝。
	終わり
	転置を取得する手順
		【計算後】という行列（大きさ（2），大きさ（1））を作る。
		大きさ（1）回，【元の行】にカウントしながら繰り返す
			大きさ（2）回，【元の列】にカウントしながら繰り返す
				計算後の中身（元の列）（元の行）は，中身（元の行）（元の列）。
			繰り返し終わり
		繰り返し終わり
		計算後を返す。
	終わり
	自分を足して一行にまとめる手順
		【計算後】という行列（1，大きさ（2））を作る。
		大きさ（1）回，【現在行】にカウントしながら繰り返す
			大きさ（2）回，【現在列】にカウントしながら繰り返す
				計算後の中身（1）（現在列）へ中身（現在行）（現在列）を足す。
			繰り返し終わり
		繰り返し終わり
		計算後を返す。
	終わり
	和を取得する手順
		【計算後】という行列（大きさ（1），1）を作る。
		大きさ（1）回，【現在行】にカウントしながら繰り返す
			大きさ（2）回，【現在列】にカウントしながら繰り返す
				計算後の中身（現在行）（1）へ中身（現在行）（現在列）を足す。
			繰り返し終わり
		繰り返し終わり
		計算後を返す。
	終わり
	最大値を取得する手順
		【計算後】という行列（大きさ（1），1）を作る。
		大きさ（1）回，【現在行】にカウントしながら繰り返す
			大きさ（2）回，【現在列】にカウントしながら繰り返す
				もし中身（現在行）（現在列）が計算後の中身（現在行）（1）より大きいなら
					計算後の中身（現在行）（1）は，中身（現在行）（現在列）。
				もし終わり
			繰り返し終わり
		繰り返し終わり
		計算後を返す。
	終わり
	自分を表示する手順
		中身を，【一行】へそれぞれ繰り返す
			一行を「，」で繋げたものをコンソールへ表示して改行する。
		繰り返し終わり
	終わり
	自分をランダム化する手順
		大きさ（1）回，【現在行】にカウントしながら繰り返す
			大きさ（2）回，【現在列】にカウントしながら繰り返す
				中身（現在行）（現在列）は，10000の乱数÷10000
			繰り返し終わり
		繰り返し終わり
	終わり
	最大値となる添字を取得する手順
		【計算後】という行列（大きさ（1），1）を作る。
		大きさ（1）回，【現在行】にカウントしながら繰り返す
			【最大値】
			【最大値添字】
			大きさ（2）回，【現在列】にカウントしながら繰り返す
				もし中身（現在行）（現在列）が，最大値より大きいなら
					最大値は，中身（現在行）（現在列）。
					最大値添字は，現在列。
				もし終わり。
			繰り返し終わり
			計算後の中身（現在行）（1）は，最大値添字。
		繰り返し終わり
		計算後を返す。
	終わり
終わり


【X：行列】を指数関数で処理する手順
	【計算後】という行列（Xの行の数，Xの列の数）を作る。
	Xの行の数回，【現在行】にカウントして繰り返す
		Xの列の数回，【現在列】にカウントして繰り返す
			計算後の中身（現在行）（現在列）は，Xの中身（現在行）（現在列）の自然対数乗。
		繰り返し終わり
	繰り返し終わり
	計算後を返す。
終わり

【X：行列】を対数関数で処理する手順
	【計算後】という行列（Xの行の数，Xの列の数）を作る。
	Xの行の数回，【現在行】にカウントして繰り返す
		Xの列の数回，【現在列】にカウントして繰り返す
			計算後の中身（現在行）（現在列）は，1の自然対数乗でXの中身（現在行）（現在列）の対数。
		繰り返し終わり
	繰り返し終わり
	計算後を返す。
終わり

【X：行列】をソフトマックスで処理する手順
	【計算後】という行列（Xの行の数，Xの列の数）を作る。
	【分子】という行列（Xの行の数，Xの列の数）を作る。
	【分母】という行列（Xの行の数，1）を作る。
	【C】は，Xの最大値。
	分子は，XからCを全部引いたものを指数関数で処理したもの。
	分母は，分子の和。
	分子を分母で全部割ったものを返す。
終わり

